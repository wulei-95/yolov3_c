// Generated by gencpp from file scout_msgs/swd_msgs.msg
// DO NOT EDIT!


#ifndef SCOUT_MSGS_MESSAGE_SWD_MSGS_H
#define SCOUT_MSGS_MESSAGE_SWD_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scout_msgs
{
template <class ContainerAllocator>
struct swd_msgs_
{
  typedef swd_msgs_<ContainerAllocator> Type;

  swd_msgs_()
    : img()  {
      img.assign(0);
  }
  swd_msgs_(const ContainerAllocator& _alloc)
    : img()  {
  (void)_alloc;
      img.assign(0);
  }



   typedef boost::array<uint8_t, 150528>  _img_type;
  _img_type img;





  typedef boost::shared_ptr< ::scout_msgs::swd_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_msgs::swd_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct swd_msgs_

typedef ::scout_msgs::swd_msgs_<std::allocator<void> > swd_msgs;

typedef boost::shared_ptr< ::scout_msgs::swd_msgs > swd_msgsPtr;
typedef boost::shared_ptr< ::scout_msgs::swd_msgs const> swd_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_msgs::swd_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_msgs::swd_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace scout_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'scout_msgs': ['/home/xu/catkin_ws/src/scout_ros/scout_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::scout_msgs::swd_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_msgs::swd_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_msgs::swd_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_msgs::swd_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_msgs::swd_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_msgs::swd_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_msgs::swd_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04060cbbc89d44a3f833d13276528bf8";
  }

  static const char* value(const ::scout_msgs::swd_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04060cbbc89d44a3ULL;
  static const uint64_t static_value2 = 0xf833d13276528bf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_msgs::swd_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_msgs/swd_msgs";
  }

  static const char* value(const ::scout_msgs::swd_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_msgs::swd_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[150528] img\n\
";
  }

  static const char* value(const ::scout_msgs::swd_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_msgs::swd_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.img);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct swd_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_msgs::swd_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_msgs::swd_msgs_<ContainerAllocator>& v)
  {
    s << indent << "img[]" << std::endl;
    for (size_t i = 0; i < v.img.size(); ++i)
    {
      s << indent << "  img[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.img[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MSGS_MESSAGE_SWD_MSGS_H
